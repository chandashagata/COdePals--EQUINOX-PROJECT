from tkinter import*
from tkinter import ttk,messagebox
import sqlite3
class CourseProject:
    def __init__(self,root):
        self.root=root
        self.root.title("STUDENT RESULT MANAGEMENT SYSTEM")
        self.root.geometry("1350x700+0+0")
        self.root.config(bg="light grey")
        self.root.focus_force()
        
        #_______Title______
        title=Label(self.root,text="Manage Course Details",padx=10,compound="left",font=("groudy old style",20,"bold"),bg="#033054",fg="white").place(x=0,y=0,width=1480,height=35)
        
        #____Var_____
        self.var_course=StringVar()
        self.var_credits=StringVar()
        self.var_duration=StringVar()
        
        #_______widgets______
        lbl_courseName=Label(self.root,text="Course Name",font=("Comic Sans",20,""),bg="light grey").place(x=20,y=70)
        lbl_courseCredits=Label(self.root,text="Course Credits",font=("Comic Sans",20,""),bg="light grey").place(x=20,y=120)
        lbl_duration=Label(self.root,text="Duration",font=("Comic Sans",20,""),bg="light grey").place(x=20,y=170)
        lbl_decription=Label(self.root,text="Description",font=("Comic Sans",20,""),bg="light grey").place(x=20,y=220)
        
        self.txt_courseName=Entry(self.root,textvariable=self.var_course,font=("Comic Sans",20,""),bg="light yellow")
        self.txt_courseName.place(x=220,y=70,width=130)
        txt_courseCredits=Entry(self.root,textvariable=self.var_credits,font=("Comic Sans",20,""),bg="light yellow").place(x=220,y=120,width=130)
        txt_duration=Entry(self.root,textvariable=self.var_duration,font=("Comic Sans",20,""),bg="light yellow").place(x=220,y=180,width=130)
        self.txt_description=Text(self.root,font=("Comic Sans",20,""),bg="light yellow")
        self.txt_description.place(x=220,y=230,width=335,height=100)
        
        #____Buttons______
        self.btn_add=Button(self.root,text="Add",font=("Callibri",15,"bold"),bg="#2193f3",fg="white",cursor="hand2",command=self.add)
        self.btn_add.place(x=150,y=450,width=110,height=40)
        self.btn_update=Button(self.root,text="Update",font=("Callibri",15,"bold"),bg="dark green",fg="white",cursor="hand2",command=self.update)
        self.btn_update.place(x=270,y=450,width=110,height=40)
        self.btn_delete=Button(self.root,text="Delete",font=("Callibri",15,"bold"),bg="red",fg="white",cursor="hand2",command=self.delete)
        self.btn_delete.place(x=390,y=450,width=90,height=40)
        
        #______Search Panel_______
        self.var_search=StringVar()
        lbl_search_courseName=Label(self.root,text="Course Name",font=("goudy old style",20,""),bg="light grey").place(x=600,y=70)
        txt_search_courseName=Entry(self.root,textvariable=self.var_search,font=("Comic Sans",20,""),bg="light yellow").place(x=780,y=70,width=180)
        btn_search=Button(self.root,text="Search",font=("Callibri",15,"bold"),bg="#03a9f4",fg="white",cursor="hand2",command=self.search).place(x=1000,y=75,width=110,height=28)
        
        #_______CONTENT_____
        self.C_frame=Frame(self.root,bd=2,relief=SUNKEN)
        self.C_frame.place(x=750,y=130,width=490,height=370)
        
        self.CourseTable=ttk.Treeview(self.C_frame,columns=("cid","Name","Credits","Duration","Description"))
        self.CourseTable.heading("cid",text="Course ID")
        self.CourseTable.heading("Name",text="Name")
        self.CourseTable.heading("Credits",text="Credits")
        self.CourseTable.heading("Duration",text="Duration")
        self.CourseTable.heading("Description",text="Description")
        self.CourseTable["show"]='headings'
        self.CourseTable.column("cid",width=70)
        self.CourseTable.column("Name",width=100)
        self.CourseTable.column("Credits",width=100)
        self.CourseTable.column("Duration",width=100)
        self.CourseTable.column("Description",width=150)
        self.CourseTable.pack(fill=BOTH,expand=1)
        self.CourseTable.bind("ButtonRelease-1",self.get_data)
        self.show()
#=====================================================================================================
def delete(self):
 con=sqlite3.connect(database="rms.db")
cur=con.cursor()
try:
        if self.var_course.get=="":
            messagebox.showerror("Error","Course Name should be Required",parent=self.root)
        else:
            cur.execute("select * from course where name=?",(self.var_course.get(),))
            row=cur.fetchone()
            if row==None:
                messagebox.showerror("Error","Select course",parent=self.root)
            else:
                op=messagebox.askyesno("Confirm","Do you really want to delete?",parent=self.root)
                if op==True:
                    cur.execute("delete from course where name=?",(self.var_course.get(),))
                    con.commit()
                    messagebox.showinfo("Delete","Deleted Successfully",parent=self.root)
                    self.show()
except Exception as ex:
        messagebox.showerror("Error",f"Error due to {str(ex)}")


def get_data(self,ev):
    self.txt_CourseName.config(State='readonly')
    self.txt_CourseName
    r=self.CourseTable.focus()
    content=self.CourseTable.item(r)
    row=content["values"]
    #print(row)
    self.var_course.set(row[1])
    self.var_credits.set(row[2])
    self.var_duration.set(row[3])
    #self.var_description.set(row[4])
    self.txt_description.delete('1.0',END)
    self.txt_description.insert(END,row[4])

    
def add(self):
    con=sqlite3.connect(database="rms.db")
    cur=con.cursor()
    try:
        if self.var_course.get=="":
            messagebox.showerror("Error","Course Name should be Required",parent=self.root)
        else:
            cur.execute("select * from course where name=?",(self.var_course.get(),))
            row=cur.fetchone()
            if row!=None:
                messagebox.showerror("Error","Course Name already exists",parent=self.root)
            else:
                cur.execute("insert into course(name,credits,duration,description)values(?,?,?,?)",(
                    self.var_course.get(),
                    self.var_credits.get()
                    self.var_duration.get(),
                    self.txt_description.get("1.0",END)
                ))
                con.commit()
                messagebox.showinfo("Success","Couse added successfully",parent=self.root)
                self.show()
    except Exception as ex:
        messagebox.showerror("Error",f"Error due to {str(ex)}")

def update(self):
    con=sqlite3.connect(database="rms.db")
    cur=con.cursor()
    try:
        if self.var_course.get=="":
            messagebox.showerror("Error","Course Name should be Required",parent=self.root)
        else:
            cur.execute("select * from course where name=?",(self.var_course.get(),))
            row=cur.fetchone()
            if row!=None:
                messagebox.showerror("Error","Select Course",parent=self.root)
            else:
                cur.execute("update course set credits=?,duration=?,description=? where name=?",(
                    self.var_credits.get(),
                    self.var_duration.get(),
                    self.txt_description.get("1.0",END)
                    self.var_course.get(),
                ))
                con.commit()
                messagebox.showinfo("Success","Course updated successfully",parent=self.root)
                self.show()
    except Exception as ex:
        messagebox.showerror("Error",f"Error due to {str(ex)}")



def show(self):
    con=sqlite3.connect(database="rms.db")
    cur=con.cursor()
    try:
        cur.execute("select * from course")
        rows=cur.fetchall()
        self.CourseTable.delete(*self.CourseTable.get_children())
        for row in rows:
            self.CourseTable.insert('',END,values=row)
    except Exception as ex:
        messagebox.showerror("Error",f"Error due to {str(ex)}")

def search(self):
    con=sqlite3.connect(database="rms.db")
    cur=con.cursor()
    try:
        cur.execute(f"select * from course where name LIKE '%{self.var_search.get()}%'")
        rows=cur.fetchall()
        self.CourseTable.delete(*self.CourseTable.get_children())
        for row in rows:
            self.CourseTable.insert('',END,values=row)
    except Exception as ex:
        messagebox.showerror("Error",f"Error due to {str(ex)}")



if __name__=="__main__":
    root=Tk()
    obj=CourseProject(root)
    root.mainloop()
